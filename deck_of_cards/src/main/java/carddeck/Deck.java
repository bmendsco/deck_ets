package carddeck;
import java.util.Random;
import java.util.NoSuchElementException;
/**
*  
* Deck - This class will define the Deck object
* @author Benedict Mendscole
* 
*/

public class Deck{

   //fields 
   private final int NUMCARDS = 52;              //the initial possible number of cards in deck
   private Card[] cards;                         //will hold cards in deck
   private int deckSize;                         //will hold the number of cards remaining in deck
   
   
   /**
   * default constructor 
   */
   public Deck(){
   
      //initialize fields
      cards = generateDeck();
      deckSize = NUMCARDS;
   }
   
   /**
   * generateDeck()- this method will generate an unshuffled deck of 52 cards
   * @return tempDeck - an array of 52 unshuffled cards
   *
   */
   private Card[] generateDeck(){
   
      //declared variables
      Card [] tempDeck;                  //will hold deck of 52 cards generated by method
      int count;                         //index counter for array
      
      //initialize variables
      tempDeck = new Card[NUMCARDS];
      count = -1;
      
      //generate deck of 52 cards...13 per suit
      for(CardSuit suit: CardSuit.values()){
         
         for(CardRank rank : CardRank.values()){
         
            count++;
            tempDeck[count]= new Card(rank, suit);
            
         }
      }
       
      return tempDeck;
      
   }//end method
   
   /**
   * getDeckSize()- will return size of deck
   *
   */
   public int getDeckSize(){
   
      return this.deckSize;
   }
   
   /**
   * shuffle() - this method will shuffle an array of cards
   * 
   */
   public void shuffle(){
      //declared variables
      Random rand;                //will be used to genereate random int
      int index;                  //will hold random int generated
               
      //initialize variables
      rand = new Random();  
      index =0;       
      
   
      for(int i=deckSize-1;i>0;i--){
      
         index = rand.nextInt(i);
         
         //swap randomly selected card at index with current card at i
         Card temp = cards[i];
         cards[i] = cards[index];
         cards[index] = temp;
      
      }
   }
   /**
   * dealOneCar() - this method will deal a card from the cards[]
   * @throws NoSuchElementException when method is called but deck is empty
   * @return card - the card dealed from the deck
   * 
   */
   public Card dealOneCard(){
      //declared variables
      Card card;
      
      //initialized variables
      card = null;
      
      if(deckSize ==0){
         throw new NoSuchElementException("Empty Deck: " + deckSize);
      }
      
      //get card on top of deck
      card = cards[0];
      
      //shift cards to front
      for(int i = 0;i<deckSize-1;i++){
      
         cards[i] = cards[i+1];
      }
      
      //set last card to null and decrement deckSize
      cards[deckSize-1]=null;
      deckSize--;
   
      return card;
   }
   
   /**
   * toString() will return a string representation of the deck
   * @return retStr - deck string representation
   *
   */
   public String toString(){
      //declared variables
      String retStr;
      
      //initialize variables
      retStr = "Deck Size: " + getDeckSize() + "\n";
      
      for(int i =0;i<getDeckSize();i++){
      
         retStr += cards[i].toString() +"\n";
      }
      
      return retStr;
   }
  
}
